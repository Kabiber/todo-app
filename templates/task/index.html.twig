{% extends 'base.html.twig' %}

{% block title %}Task List{% endblock %}

{% block body %}
    <h1 class="text-center mb-4 space-mono-bold">Task List</h1>

    <!-- Календарь с актуальной датой и временем -->
    <div class="calendar-container bg-white rounded p-3 mb-4" style="max-width: 300px; margin-left: auto; margin-right: auto;">
        <h3 class="text-center" id="current-date"></h3>
        <p class="text-center" id="current-time"></p>
    </div>

    <a href="{{ path('task_create') }}" class="btn btn-primary d-block mb-3 space-mono-regular">Create New Task</a>

    <ul class="list-unstyled">
        {% for task in tasks %}
            <li class="task-item {% if task.isCompleted %}completed{% endif %}">
                <div class="d-flex align-items-center justify-content-between">
                    <!-- Чекбокс для изменения статуса -->
                    <div>
                        <input
                                type="checkbox"
                                class="form-check-input status-checkbox me-2"
                                data-task-id="{{ task.id }}"
                                {% if task.isCompleted %}checked{% endif %}>
                        <strong class="space-mono-bold">{{ task.title }}</strong> -
                        <span class="space-mono-regular">{{ task.description }}</span>
                    </div>

                    <!-- Таймер обратного отсчета -->
                    <div class="timer-container">
                        {% if task.deadline %}
                            <p class="timer" data-deadline="{{ task.deadline|date('Y-m-d H:i:s') }}">Loading...</p>
                        {% else %}
                            <p class="text-muted">No deadline</p>
                        {% endif %}
                    </div>
                </div>

                <!-- Кнопки "Edit" и "Delete" -->
                <div class="mt-2 d-flex justify-content-end">
                    <a href="{{ path('task_edit', { id: task.id }) }}" class="btn btn-sm btn-warning me-2 space-mono-regular">Edit</a>
                    <a href="{{ path('task_delete', { id: task.id }) }}" class="btn btn-sm btn-danger space-mono-regular">Delete</a>
                </div>
            </li>
        {% else %}
            <p class="text-center space-mono-regular">No tasks found.</p>
        {% endfor %}
    </ul>

    <!-- JavaScript для чекбокса -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Обновление даты и времени на календаре
            function updateCalendar() {
                const now = new Date();
                document.getElementById('current-date').textContent = now.toLocaleDateString();
                document.getElementById('current-time').textContent = now.toLocaleTimeString();
            }

            setInterval(updateCalendar, 1000); // Обновляем каждую секунду
            updateCalendar(); // Первичное обновление при загрузке страницы

            // Таймер обратного отсчета до дедлайна
            const timers = document.querySelectorAll('.timer');
            timers.forEach(timer => {
                const deadline = new Date(timer.dataset.deadline);

                function countdown() {
                    const now = new Date();
                    const diff = deadline - now;

                    if (diff <= 0) {
                        timer.textContent = 'Time is up!';
                        timer.style.color = 'red';
                        return;
                    }

                    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

                    timer.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;
                }

                countdown(); // Первичный запуск
                setInterval(countdown, 1000); // Обновляем каждую секунду
            });

            // Обработка чекбоксов
            const checkboxes = document.querySelectorAll('.status-checkbox');

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', async (event) => {
                    const taskId = event.target.dataset.taskId;

                    try {
                        const response = await fetch(`{{ path('task_toggle_status', {'id': '__id__'}) }}`.replace('__id__', taskId), {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        });

                        if (!response.ok) {
                            throw new Error('Failed to update task status.');
                        }

                        // Обновляем класс задачи
                        const taskItem = event.target.closest('.task-item');
                        if (event.target.checked) {
                            taskItem.classList.add('completed');
                        } else {
                            taskItem.classList.remove('completed');
                        }
                    } catch (error) {
                        alert(error.message);
                        event.target.checked = !event.target.checked; // Возвращаем исходное состояние чекбокса
                    }
                });
            });
        });
    </script>
{% endblock %}









{#{% extends 'base.html.twig' %}#}

{#{% block title %}Task List{% endblock %}#}

{#{% block body %}#}
{#    <h1 class="text-center mb-4 space-mono-bold">Task List</h1>#}

{#    <a href="{{ path('task_create') }}" class="btn btn-primary d-block mb-3 space-mono-regular">Create New Task</a>#}

{#    <ul class="list-unstyled">#}
{#        {% for task in tasks %}#}
{#            <li class="task-item {% if task.isCompleted %}completed{% endif %}">#}
{#                <div class="d-flex align-items-center justify-content-between">#}
{#                    <!-- Кастомный чекбокс -->#}
{#                    <div>#}
{#                        <input#}
{#                                type="checkbox"#}
{#                                class="form-check-input status-checkbox me-2"#}
{#                                data-task-id="{{ task.id }}"#}
{#                                {% if task.isCompleted %}checked{% endif %}>#}
{#                        <strong class="space-mono-bold">{{ task.title }}</strong> -#}
{#                        <span class="space-mono-regular">{{ task.description }}</span>#}
{#                    </div>#}

{#                    <!-- Кнопки "Edit" и "Delete" -->#}
{#                    <div>#}
{#                        <a href="{{ path('task_edit', { id: task.id }) }}" class="btn btn-sm btn-warning me-2 space-mono-regular">Edit</a>#}
{#                        <a href="{{ path('task_delete', { id: task.id }) }}" class="btn btn-sm btn-danger space-mono-regular">Delete</a>#}
{#                    </div>#}
{#                </div>#}
{#            </li>#}
{#        {% else %}#}
{#            <p class="text-center space-mono-regular">No tasks found.</p>#}
{#        {% endfor %}#}
{#    </ul>#}

{#    <!-- JavaScript для работы с чекбоксами -->#}
{#    <script>#}
{#        document.addEventListener('DOMContentLoaded', () => {#}
{#            const checkboxes = document.querySelectorAll('.status-checkbox');#}

{#            checkboxes.forEach(checkbox => {#}
{#                checkbox.addEventListener('change', async (event) => {#}
{#                    const taskId = event.target.dataset.taskId;#}

{#                    try {#}
{#                        const response = await fetch(`{{ path('task_toggle_status', {'id': '__id__'}) }}`.replace('__id__', taskId), {#}
{#                            method: 'POST',#}
{#                            headers: {#}
{#                                'Content-Type': 'application/json',#}
{#                            },#}
{#                        });#}

{#                        if (!response.ok) {#}
{#                            throw new Error('Failed to update task status.');#}
{#                        }#}

{#                        // Обновляем класс задачи в зависимости от состояния чекбокса#}
{#                        const taskItem = event.target.closest('.task-item');#}
{#                        if (event.target.checked) {#}
{#                            taskItem.classList.add('completed');#}
{#                        } else {#}
{#                            taskItem.classList.remove('completed');#}
{#                        }#}
{#                    } catch (error) {#}
{#                        alert(error.message);#}
{#                        event.target.checked = !event.target.checked; // Возвращаем исходное состояние чекбокса#}
{#                    }#}
{#                });#}
{#            });#}
{#        });#}
{#    </script>#}
{#{% endblock %}#}



{#{% extends 'base.html.twig' %}#}

{#{% block title %}Лист задач{% endblock %}#}

{#{% block body %}#}
{#    <h1 class="text-center mb-4 space-mono-bold">Лист задач</h1>#}

{#    <a href="{{ path('task_create') }}" class="btn btn-primary d-block mb-3 space-mono-regular">Создать новую задачу</a>#}

{#    <ul class="list-unstyled">#}
{#        {% for task in tasks %}#}
{#            <li class="task-item {% if task.isCompleted %}completed{% endif %}">#}
{#                <div class="d-flex align-items-center justify-content-between">#}
{#                    <!-- Чекбокс для изменения статуса -->#}
{#                    <div>#}
{#                        <input#}
{#                                type="checkbox"#}
{#                                class="form-check-input status-checkbox me-2"#}
{#                                data-task-id="{{ task.id }}"#}
{#                                {% if task.isCompleted %}checked{% endif %}>#}
{#                        <strong class="space-mono-bold">{{ task.title }}</strong> -#}
{#                        <span class="space-mono-regular">{{ task.description }}</span>#}
{#                    </div>#}

{#                    <!-- Кнопки "Edit" и "Delete" -->#}
{#                    <div>#}
{#                        <a href="{{ path('task_edit', { id: task.id }) }}" class="btn btn-sm btn-warning me-2 space-mono-regular">Изменить</a>#}
{#                        <a href="{{ path('task_delete', { id: task.id }) }}" class="btn btn-sm btn-danger space-mono-regular">Удалить</a>#}
{#                    </div>#}
{#                </div>#}
{#            </li>#}
{#        {% else %}#}
{#            <p class="text-center space-mono-regular">No tasks found.</p>#}
{#        {% endfor %}#}
{#    </ul>#}

{#    <!-- JavaScript для работы с чекбоксами -->#}
{#    <script>#}
{#        document.addEventListener('DOMContentLoaded', () => {#}
{#            const checkboxes = document.querySelectorAll('.status-checkbox');#}

{#            checkboxes.forEach(checkbox => {#}
{#                checkbox.addEventListener('change', async (event) => {#}
{#                    const taskId = event.target.dataset.taskId;#}

{#                    try {#}
{#                        const response = await fetch(`{{ path('task_toggle_status', {'id': '__id__'}) }}`.replace('__id__', taskId), {#}
{#                            method: 'POST',#}
{#                            headers: {#}
{#                                'Content-Type': 'application/json',#}
{#                            },#}
{#                        });#}

{#                        if (!response.ok) {#}
{#                            throw new Error('Failed to update task status.');#}
{#                        }#}

{#                        // Получаем родительский элемент задачи#}
{#                        const taskItem = event.target.closest('.task-item');#}

{#                        // Обновляем класс задачи в зависимости от состояния чекбокса#}
{#                        if (event.target.checked) {#}
{#                            taskItem.classList.add('completed');#}
{#                        } else {#}
{#                            taskItem.classList.remove('completed');#}
{#                        }#}
{#                    } catch (error) {#}
{#                        alert(error.message);#}
{#                        event.target.checked = !event.target.checked; // Возвращаем исходное состояние чекбокса#}
{#                    }#}
{#                });#}
{#            });#}
{#        });#}
{#    </script>#}
{#{% endblock %}#}


{#{% extends 'base.html.twig' %}#}

{#{% block title %}Task List{% endblock %}#}

{#{% block body %}#}
{#    <h1 class="text-center mb-4 space-mono-bold">Task List</h1>#}

{#    <a href="{{ path('task_create') }}" class="btn btn-primary d-block mb-3 space-mono-regular">Create New Task</a>#}

{#    <ul class="list-unstyled">#}
{#        {% for task in tasks %}#}
{#            <li class="task-item {% if task.isCompleted %}completed{% endif %}">#}
{#                <div class="d-flex align-items-center justify-content-between">#}
{#                    <!-- Чекбокс для изменения статуса -->#}
{#                    <div>#}
{#                        <input#}
{#                                type="checkbox"#}
{#                                class="form-check-input status-checkbox me-2"#}
{#                                data-task-id="{{ task.id }}"#}
{#                                {% if task.isCompleted %}checked{% endif %}>#}
{#                        <strong class="space-mono-bold">{{ task.title }}</strong> -#}
{#                        <span class="space-mono-regular">{{ task.description }}</span>#}
{#                    </div>#}

{#                    <!-- Кнопки "Edit" и "Delete" -->#}
{#                    <div>#}
{#                        <a href="{{ path('task_edit', { id: task.id }) }}" class="btn btn-sm btn-warning me-2 space-mono-regular">Edit</a>#}
{#                        <a href="{{ path('task_delete', { id: task.id }) }}" class="btn btn-sm btn-danger space-mono-regular">Delete</a>#}
{#                    </div>#}
{#                </div>#}
{#            </li>#}
{#        {% else %}#}
{#            <p class="text-center space-mono-regular">No tasks found.</p>#}
{#        {% endfor %}#}
{#    </ul>#}

{#    <!-- JavaScript для работы с чекбоксами -->#}
{#    <script>#}
{#        document.addEventListener('DOMContentLoaded', () => {#}
{#            const checkboxes = document.querySelectorAll('.status-checkbox');#}

{#            checkboxes.forEach(checkbox => {#}
{#                checkbox.addEventListener('change', async (event) => {#}
{#                    const taskId = event.target.dataset.taskId;#}
{#                    const isChecked = event.target.checked;#}

{#                    // Отправляем запрос на сервер#}
{#                    const response = await fetch(`{{ path('task_toggle_status', {'id': '__id__'}) }}`.replace('__id__', taskId), {#}
{#                        method: 'POST',#}
{#                        headers: {#}
{#                            'X-CSRF-Token': '{{ csrf_token('task_toggle') }}' // Добавьте CSRF-токен, если используете его#}
{#                        }#}
{#                    });#}

{#                    if (!response.ok) {#}
{#                        alert('Failed to update task status.');#}
{#                        event.target.checked = !isChecked; // Возвращаем исходное состояние чекбокса#}
{#                    }#}
{#                });#}
{#            });#}
{#        });#}
{#    </script>#}
{#{% endblock %}#}